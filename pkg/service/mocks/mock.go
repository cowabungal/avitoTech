// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	avitoTech "avitoTech"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockUser) Balance(userId int) (*avitoTech.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", userId)
	ret0, _ := ret[0].(*avitoTech.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockUserMockRecorder) Balance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUser)(nil).Balance), userId)
}

// ConvertBalance mocks base method.
func (m *MockUser) ConvertBalance(ans *avitoTech.User, currency string) (*avitoTech.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertBalance", ans, currency)
	ret0, _ := ret[0].(*avitoTech.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertBalance indicates an expected call of ConvertBalance.
func (mr *MockUserMockRecorder) ConvertBalance(ans, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertBalance", reflect.TypeOf((*MockUser)(nil).ConvertBalance), ans, currency)
}

// Debit mocks base method.
func (m *MockUser) Debit(userId, amount int) (*avitoTech.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debit", userId, amount)
	ret0, _ := ret[0].(*avitoTech.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debit indicates an expected call of Debit.
func (mr *MockUserMockRecorder) Debit(userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debit", reflect.TypeOf((*MockUser)(nil).Debit), userId, amount)
}

// TopUp mocks base method.
func (m *MockUser) TopUp(userId, amount int) (*avitoTech.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", userId, amount)
	ret0, _ := ret[0].(*avitoTech.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUp indicates an expected call of TopUp.
func (mr *MockUserMockRecorder) TopUp(userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockUser)(nil).TopUp), userId, amount)
}

// Transfer mocks base method.
func (m *MockUser) Transfer(userId, toId, amount int) (*avitoTech.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", userId, toId, amount)
	ret0, _ := ret[0].(*avitoTech.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockUserMockRecorder) Transfer(userId, toId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockUser)(nil).Transfer), userId, toId, amount)
}
